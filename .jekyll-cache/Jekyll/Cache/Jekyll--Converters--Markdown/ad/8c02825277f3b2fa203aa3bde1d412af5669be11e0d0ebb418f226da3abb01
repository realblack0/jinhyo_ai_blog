I"(<p>python class를 생성할 때 __new__, __init__, __call__ 를 활용하는 방법에 대해서 먼저 알아본 후, 메타클래스에 생성자를 활용하여 클래스를 커스터마이징 하는 방법에 대하여 알아보았다.</p>

<h2 id="파이썬의-생성자-2가지">파이썬의 생성자 2가지</h2>

<h3 id="python에서-객체를-생성할-때는-__new__와-__init__-가-사용된다">python에서 객체를 생성할 때는 __new__와 __init__ 가 사용된다.</h3>
<ul>
  <li>__new__ 는 생성자이다.  클래스의 인스턴스를 만들기만 한다.</li>
  <li>__init__ 는 클래스의 속성을 초기화한다.(initialize)</li>
</ul>

<h3 id="new-를-실행할-때-주의점"><strong>new</strong> 를 실행할 때 주의점</h3>
<ul>
  <li>클래스 자기 자신을 인자로 받는다. 주로 <code class="highlighter-rouge">cls</code>  이라고 씀.
    <ul>
      <li><code class="highlighter-rouge">def __new__(cls, *args, **kwargs)</code></li>
      <li>보통 instance(주로  <code class="highlighter-rouge">self</code> 라고 쓰는 그것)를 인자로 받는 것과 차이가 있다.</li>
    </ul>
  </li>
  <li>return이 반드시 인스턴스가 아니어도 된다.
    <ul>
      <li>단, 인스턴스를 반환하지 않을 경우는 인스턴스화가 되지 않음에 유의.</li>
    </ul>
  </li>
</ul>

<h3 id="init-를-실행하는-2가지-방법"><strong>init</strong> 를 실행하는 2가지 방법</h3>
<ul>
  <li>클래스에서 실행하는 방법
    <ul>
      <li><code class="highlighter-rouge">cls.__init__(instance, *args, **kwargs)</code></li>
      <li>클래스에서 실행할 때에는 instance를 지정해줘야한다. (보통 self로 쓰는 그것)</li>
    </ul>
  </li>
  <li>인스턴스에서 실행하는 방법
    <ul>
      <li><code class="highlighter-rouge">instance.__init__(*args, **kwargs)</code>  (instance는 인스턴스 객체)</li>
      <li>인스턴스에서 실행할 때에는 self에 인스턴스 자기자신이 자동으로 들어간다.</li>
    </ul>
  </li>
</ul>

<h3 id="__call__의-역할">__call__의 역할</h3>
<ul>
  <li>__new__ 가 인스턴스 객체를 반환하지 않을 경우, __call__은 __init__를 실행하지 않는다.</li>
  <li>__call__ 을 오버라이딩할 경우, __new__와 __init__를 따로 실행해줘야 한다.
    <ul>
      <li>__new__는 __init__를 자동으로 실행하지 않음</li>
      <li><code class="highlighter-rouge">__new__(cls, [...])</code> , <code class="highlighter-rouge">__init__(instance, [...])</code>  ⇒ __new__와 __init__는 첫번째 인자만 다르고 나머지는 동일하게 입력한다.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="메타-클래스에서-생성자-자유로이-사용하기">메타 클래스에서 생성자 자유로이 사용하기</h2>

<p>※ 클래스에서 생성자를 사용하는 것과 헷갈릴 수 있으므로 주의하기.</p>
<ul>
  <li>위 설명에서 cls는 meta, self는 cls로 바꿔서 이해하면 된다. (메타클래스는 클래스의 클래스이므로)</li>
</ul>

<p>파이썬의 최상위 메타클래스인 type을 상속 받아서  __new__, __init__, __call__ 를 오버라이딩한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MetaType</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span> <span class="c1"># type을 상속 받아서 metaclass를 생성
</span>    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">meta</span><span class="p">,</span> <span class="n">metaname</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span> <span class="c1"># cls가 아니라 meta를 받음
</span>        <span class="k">print</span><span class="p">(</span><span class="s">'MetaType is used'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">MetaType</span><span class="p">,</span> <span class="n">meta</span><span class="p">)</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">meta</span><span class="p">,</span> <span class="n">metaname</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span>
<span class="c1">#         return type.__new__(meta, metaname, bases, attrs)   # 이렇게도 가능
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"MyClass is initialized"</span><span class="p">)</span>
        <span class="n">cls</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="s">'class attribute from meta'</span>  <span class="c1"># 메타클래스에서 클래스의 속성을 정의 가능
</span>      
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'MyClass is called'</span><span class="p">)</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">cls</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>    <span class="c1"># 인스턴스만 생성
#         instance.__init__(*args, **kwargs)   # 이렇게도 가능
</span>        <span class="n">cls</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>         <span class="c1"># 인스턴스 속성 초기화
</span>        <span class="k">return</span> <span class="n">instance</span> <span class="c1"># class에 call 했을때 인스턴스 객체를 반환
</span></code></pre></div></div>

<p>메타클래스를 지정해서 클래스를 생성한다. 클래스는 메타클래스의 인스턴스이므로 이는 곧 메타클래스를 인스턴스화하는 것과 같다. 따라서 메타클래스 <code class="highlighter-rouge">MetaType</code>의 __new__ 와 __init__가 실행되고 프린트문이 출력된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">MetaType</span><span class="p">):</span>
    <span class="n">b</span> <span class="o">=</span> <span class="s">'class attribute'</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="s">'instance attribute'</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">d</span> <span class="o">=</span> <span class="n">d</span>

<span class="c1"># print
# MetaType is used
# MyClass is initialized
</span></code></pre></div></div>

<p>a 속성은 <code class="highlighter-rouge">MetaType</code>의 __init__에서 정의하였다. 메타클래스의 __init__에서 속성을 정의하면 클래스의 속성이 초기화된다.(클래스에서 __init__를 정의하면 인스턴스의 속성이 초기화되는 것과 같다.) b 속성은 <code class="highlighter-rouge">MyClass</code>를 선언하면서 직접 정의하였다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">MyClass</span><span class="o">.</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">MyClass</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>

<span class="c1"># print
# class attribute from meta
# class attribute
</span></code></pre></div></div>

<p><code class="highlighter-rouge">MyClass</code>를 인스턴스화한 <code class="highlighter-rouge">myInstance</code>를 생성하였다. 메타클래스에서 정의한 __call__은 클래스를 호출할 때의 동작이다. 따라서 <code class="highlighter-rouge">MetaType</code>에서 정의한 __call__ 안에 있는 print문이 실행된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">myInstance</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># print
# MyClass is called
</span></code></pre></div></div>

<p><code class="highlighter-rouge">MyClass</code>의 __init__에서 정의한 c 속성과, 클래스를 인스턴스할때 인자로 사용한 d 속성 모두 <code class="highlighter-rouge">myInstance</code>의 속성으로 포함되어 있다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">vars</span><span class="p">(</span><span class="n">myInstance</span><span class="p">)</span>

<span class="c1"># output
# {'c': 'instance attribute', 'd': 1}
</span></code></pre></div></div>
:ET